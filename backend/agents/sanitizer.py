# backend/agents/sanitizer.py
import re

def sanitize_command(command: str) -> str:
    """
    Forcefully cleans a command generated by the AI to ensure it is syntactically valid.
    This is a hard-coded enforcement layer to correct common AI mistakes.
    """
    # First, a general cleanup of common AI artifacts like markdown
    cleaned_command = command.strip().replace("`", "").replace("bash", "").strip()

    # --- ENFORCEMENT RULES ---
    # List of tools that expect a clean HOSTNAME or IP, not a URL
    protocol_agnostic_tools = ['nmap', 'dig', 'whatweb', 'nikto']

    for tool in protocol_agnostic_tools:
        # Check if the command starts with this tool (allowing for flags, e.g., "sudo nmap...")
        if re.search(fr'^\s*(sudo\s+)?{tool}', cleaned_command):
            
            # This is our "smoking gun" debug print. If you see this, the sanitizer is working.
            print(f"[Sanitizer] Detected '{tool}'. Removing protocols from: '{cleaned_command}'")
            
            # If it's one of these tools, forcefully remove any http/https protocols
            cleaned_command = re.sub(r'https?://', '', cleaned_command)
            break
    
    return cleaned_command